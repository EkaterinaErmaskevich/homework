let t = 'number' + 3 + 3
//  Результат : number33 , бо number є стрінгою до якоі додаються ще 2 символи 3 і 3 ( конкатінація ). 
let t1 = null + 3
//Результат : 3 , бо  null сприймаеться javascript як обьект що вказує на відстність значення , а + конкатинує два значення , то в результаті отримаєемо 3
let t2 = 5 && "qwerty"
//Результат : "qwerty" , бо  &&  визначає останне true , а так як в данному
//  випадку буде 5 && "qwerty" , то і кінцевий результат буде qwerty
let t3 = +'40' + +'2' + "hillel";
// Результат : 42hillel , бо в данному прикладі всі значення ідуть як текстові ( на що вказують лапки), відповідно всі три текстових значення поеднуються в одну строку
var t4 = '10' - 5 === 6;
//Результат : false , бо буде виконана конвертація текстового значення '10' в число , далі операція віднімання 10 - 5 , в результаті якоі мі отрімаемо 5 . 
// Останній етап порівняння 5 і 6 і так воні не рівні то результатом порівняння буде false
var t5 = true + false
//  Результат : 1 , бо true конвертуеься в 1 , false в нуль
var t6 = '4px' - 3
//Результат : NaN , бо у випадку опараціі віднімання  елементи  будуть конверуватись до чисел. В данному випадку  конвертувати '4px' в число не вийде , 
// бо наявні додаткові символи, отже буде отримане NaN
var t7 = '4' - 3
//Результат : 1, бо виконуеться автоматичне приведення значення '4' до числа ( в данному випадку система може це зробити , бо в лапках тільки число ). 
// Далі відбуваеться математематична операція віднімання двох чисел
var t8 = '6' + 3 ** 0;
//Результат : 61 , бо 3 зводиться в нульву ступінь , що дає 1 . Далі відбуваеться конкатинація '6' ( яке є текстовим ) і отриманоі внаслідок арифметічноі операціі 1.
//  На відміну від попепедньоі операціі відбуваеться конкатінація , а не аріфметічна дія, бо + в JavaScript вікорістовуеться не тільки для додавання
var t9 = 12 / '6'
//Результат : 2 , бо на відміну від операцій де використовується + в разі ділення дані пріводяться ( в разі можливості ) до числового значення. В данному випадку дільник 
//заданій як текст якій містить числове значення , відповідно може бути конвертоване в число
let t10 = '10' + (5 === 6);
//Результат : 10false , бо перша частина є текстовим значенням  до якого конкатинуеться false, як результат порівняння (5 === 6) 
let t11 = null == ''
//Результат : false , бо null визначаеться як обьект в JavaScript , а '' є пустим текстовим значенням. Типи даніх не спивпадають відповідно , ми отримуемо false
let t12 = 3 ** (9 / 3);
// Результат : 27, бо виконуеться операція ділення в дужках , далі віконуеться операція підведення в ступінь  ( трійка в третю ступінь)
let t13 = !!'false' == !!'true'
// Результат : true , бо в прікладі є два істінних значення ( текст) ,  які  оператором !! конвертуються до false , а потім ця конвертація відміняеться, відповідно порівнюеться 2 true
let t14 = 0 || '0' && 1
//Результат : 1  ,  бо ||повертає true  якщо хоча б один з операторів  є true , далі &&  визначає останне true , а так як в данному
//  випадку буде 0 && 1 , то і кінцевий результат буде 1 (останне натуральне значення)
let t15 = (+null == false) < 1;
//Результат : false , бо в порівнянні приймають участь різні типи данних . Конвертація не відбуваеться
// бо використовуються  == 
let t16 = false && true || true
//Результат : true ,   бо ||повертає true  якщо хоча б один з операторів  є true , далі &&  визначає останне true, а так як в данному
//  випадку буде false && true , то і кінцевий результат буде true
let t17 = false && (false || true);
//Результат : false ,  бо ||повертає true  якщо хоча б один з операторів  є true , інакше повертає false, далі &&  визначає останне true, а так як в данному
//  випадку буде false && false , то і кінцевий результат буде false
let t18 = (+null == false) < 1 ** 5;
//Результат : false , бо в порівнянні приймають участь різні типи данних , бо використовуються  == . +null конвертуеться до числа 0
console.log(t,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18);
