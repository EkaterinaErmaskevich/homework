{
	"info": {
		"_postman_id": "c7c15241-02b5-46a1-9f4a-73a119662376",
		"name": "QA_PRO_GraphQL",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "27169443"
	},
	"item": [
		{
			"name": "query",
			"item": [
				{
					"name": "basicRequest",
					"item": [
						{
							"name": "GetAllAbstractCities",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 500 ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is OK\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"var jsonData = pm.response.json().data.getAllCities;\r",
											"\r",
											"\r",
											"let cityIDArray = [].map(Number);\r",
											"  for (let element of jsonData){\r",
											"    cityIDArray.push(element.id)\r",
											"  }\r",
											"\r",
											"let maxCityID = Math.max(...cityIDArray);\r",
											"\r",
											"let minCityID = Math.min(...cityIDArray);\r",
											"\r",
											"let citySquareArray = [].map(Number);\r",
											"  for (let element of jsonData){\r",
											"    citySquareArray.push(element.square)\r",
											"  }\r",
											"\r",
											"function averageСost(arr) {\r",
											"   var sum = 0;\r",
											"   for(var i = 0; i < arr.length; i++) {\r",
											"       sum += arr[i];\r",
											"   }\r",
											"   return sum / arr.length;\r",
											"}\r",
											"let newSquere = averageСost(citySquareArray);\r",
											"pm.collectionVariables.set(\"newSquere\",newSquere);\r",
											"\r",
											"let numArr = cityIDArray;\r",
											"\r",
											"function getRandomUnique(array) {\r",
											"  if (array.length === 0) return undefined; \r",
											"  let randomIndex = Math.floor(Math.random() * array.length);\r",
											"  let value = array[randomIndex];\r",
											"  array.splice(randomIndex, 1);\r",
											"  return value;\r",
											"}\r",
											"\r",
											"let availableNumbers = [...numArr];\r",
											"\r",
											"let cityId1 = getRandomUnique(availableNumbers);\r",
											"let cityId2 = getRandomUnique(availableNumbers);\r",
											"let cityId3 = getRandomUnique(availableNumbers);\r",
											"let cityId4 = getRandomUnique(availableNumbers);\r",
											"\r",
											"pm.collectionVariables.set(\"cityId1\",cityId1);\r",
											"pm.collectionVariables.set(\"cityId2\",cityId2);\r",
											"pm.collectionVariables.set(\"cityId3\",cityId3);\r",
											"pm.collectionVariables.set(\"cityId4\",cityId4);\r",
											"\r",
											"let randomCityIdArray = [cityId1, cityId2,cityId3,cityId4].map(Number);\r",
											"pm.collectionVariables.set(\"randomCityIdArray\",randomCityIdArray);\r",
											"let maxRandomCityID = Math.max(...randomCityIdArray);\r",
											"pm.collectionVariables.set(\"maxRandomCityID\",maxRandomCityID);\r",
											"let minRandomCityID = Math.min(...randomCityIdArray);\r",
											"pm.collectionVariables.set(\"minRandomCityID\",minRandomCityID);\r",
											"\r",
											"console.log(\"Cереднє значення всіх площ усіх міст \" +  averageСost(citySquareArray));"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query{\r\n  getAllCities{\r\n    id\r\n    name\r\n    square\r\n \r\n  }\r\n\r\n}\r\n",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{url}}",
									"host": [
										"{{url}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetCityDescriptionByRandomId1",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let cityId1 =  pm.collectionVariables.get(\"cityId1\");",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query{\r\n  getCityDescription(id: {{cityId1}})\r\n}",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{url}}",
									"host": [
										"{{url}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetCityiesByMinMaxId",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let maxRandomCityID = pm.collectionVariables.get(\"maxRandomCityID\");",
											"let minRandomCityID = pm.collectionVariables.get(\"minRandomCityID\");",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Body matches string id , name\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"id\",\"name\");",
											"});",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query{\r\n  getCityByRangeId(filter:{minId:{{minRandomCityID}}, maxId:{{maxRandomCityID}}}){\r\n    id\r\n    name\r\n    square\r\n  }\r\n}",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{url}}",
									"host": [
										"{{url}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetCityiesByIds",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let cityId1 = pm.collectionVariables.get(\"cityId1\");",
											"let cityId2 = pm.collectionVariables.get(\"cityId2\");",
											"let cityId3 = pm.collectionVariables.get(\"cityId3\");",
											"let cityId4 = pm.collectionVariables.get(\"cityId4\");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Body matches string id\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"id\");",
											"});",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query{\r\n  getCitiesByIds(in:[1,3,5,6]){\r\n    id\r\n    name\r\n    square\r\n  }\r\n}",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{url}}",
									"host": [
										"{{url}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "mutation",
			"item": [
				{
					"name": "AddCity",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let newSquere = pm.collectionVariables.get(\"newSquere\");",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Body matches string id\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"id\");",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"pm.test(\"Status code name has string OK\", function () {",
									"    pm.response.to.have.status(\"OK\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation{\r\n  addCity(name:\"Test\",square:{{newSquere}},description:\"Best\"){\r\n    id\r\n    name\r\n    square\r\n    ... on City{\r\n      description\r\n    }\r\n  }\r\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "url",
			"value": "https://graphql-ukrainian-cities.hillel.it/graphql",
			"type": "string"
		},
		{
			"key": "minId",
			"value": "10",
			"type": "string"
		},
		{
			"key": "maxId",
			"value": "15",
			"type": "string"
		},
		{
			"key": "CityId1",
			"value": ""
		},
		{
			"key": "maxRandomCityID ",
			"value": ""
		},
		{
			"key": "minRandomCityID ",
			"value": ""
		},
		{
			"key": "randomCityIdArray",
			"value": ""
		},
		{
			"key": "maxRandomCityID",
			"value": ""
		},
		{
			"key": "minRandomCityID",
			"value": ""
		},
		{
			"key": "cityId1",
			"value": ""
		},
		{
			"key": "newSquere",
			"value": ""
		},
		{
			"key": "cityId2",
			"value": ""
		},
		{
			"key": "cityId3",
			"value": ""
		},
		{
			"key": "cityId4",
			"value": ""
		}
	]
}